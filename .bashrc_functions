#!/bin/bash
# =====================================================
# Extended DevOps Functions
# =====================================================

# ============= GIT FUNCTIONS =============

git-cleanup() {
    echo "[*] Cleaning obsolete Git branches..."
    
    git fetch -p
    
    echo ""
    echo "Merged branches (excluding main/master/develop):"
    git branch --merged | grep -v "\*" | grep -v "main" | grep -v "master" | grep -v "develop"
    
    echo ""
    read -p "Delete these branches? (y/n) " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git branch --merged | grep -v "\*" | grep -v "main" | grep -v "master" | grep -v "develop" | xargs -n 1 git branch -d
        echo "[+] Branches cleaned"
    else
        echo "[!] Cancelled"
    fi
}

git-sync() {
    echo "[*] Syncing with remote..."
    
    CURRENT_BRANCH=$(git branch --show-current)
    
    git fetch --all --prune
    
    echo "[*] Pulling current branch: $CURRENT_BRANCH"
    git pull
    
    echo "[+] Sync complete"
}

# ============= DOCKER FUNCTIONS =============

docker-shell() {
    if [ -z "$1" ]; then
        echo "Usage: docker-shell <partial-name>"
        echo ""
        echo "Available containers:"
        docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
        return 1
    fi
    
    CONTAINER=$(docker ps --format "{{.Names}}" | grep -i "$1" | head -n 1)
    
    if [ -z "$CONTAINER" ]; then
        echo "[!] No container found matching: $1"
        return 1
    fi
    
    echo "[*] Connecting to: $CONTAINER"
    
    docker exec -it "$CONTAINER" /bin/bash 2>/dev/null || docker exec -it "$CONTAINER" /bin/sh
}

docker-ip() {
    if [ -z "$1" ]; then
        echo "Usage: docker-ip <container-name>"
        echo ""
        echo "Available containers:"
        docker ps --format "{{.Names}}"
        return 1
    fi
    
    docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$1"
}

docker-stats-live() {
    docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
}

# ============= TERRAFORM FUNCTIONS =============

tf-clean() {
    echo "[*] Cleaning Terraform cache and files..."

    if [ -d ".terraform" ]; then
        rm -rf .terraform
        echo "[+] Removed .terraform directory"
    fi

    if [ -f ".terraform.lock.hcl" ]; then
        rm -f .terraform.lock.hcl
        echo "[+] Removed .terraform.lock.hcl"
    fi

    if [ -f "terraform.tfstate" ]; then
        echo "[!] Warning: terraform.tfstate found"
        read -p "Delete terraform.tfstate? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -f terraform.tfstate terraform.tfstate.backup
            echo "[+] Removed state files"
        fi
    fi

    if [ -f "crash.log" ]; then
        rm -f crash.log
        echo "[+] Removed crash.log"
    fi

    echo "[+] Terraform cleanup complete"
}

tf-check() {
    echo "[*] Running Terraform checks..."
    echo ""

    echo "[1/3] Formatting..."
    terraform fmt -recursive
    echo ""

    echo "[2/3] Validating..."
    if ! terraform validate; then
        echo "[!] Validation failed"
        return 1
    fi
    echo ""

    echo "[3/3] Planning..."
    terraform plan

    echo ""
    echo "[+] All checks complete"
}

tf-new() {
    PROJECT_NAME=${1:-"terraform-project"}

    echo "[*] Creating new Terraform project: $PROJECT_NAME"

    mkdir -p "$PROJECT_NAME"
    cd "$PROJECT_NAME"

    # Create main.tf
    cat > main.tf <<'EOF'
terraform {
  required_version = ">= 1.0"

  required_providers {
    # Add your providers here
    # Example:
    # aws = {
    #   source  = "hashicorp/aws"
    #   version = "~> 5.0"
    # }
  }
}

# Provider configuration
# provider "aws" {
#   region = var.aws_region
# }

# Resources go here
EOF

    # Create variables.tf
    cat > variables.tf <<'EOF'
# Input variables

# variable "environment" {
#   description = "Environment name"
#   type        = string
#   default     = "dev"
# }

# variable "aws_region" {
#   description = "AWS region"
#   type        = string
#   default     = "us-east-1"
# }
EOF

    # Create outputs.tf
    cat > outputs.tf <<'EOF'
# Output values

# output "example_output" {
#   description = "Example output"
#   value       = "example_value"
# }
EOF

    # Create terraform.tfvars (gitignored)
    cat > terraform.tfvars <<'EOF'
# Variable values for this environment
# environment = "dev"
EOF

    # Create .gitignore
    cat > .gitignore <<'EOF'
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Override files
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Variable files (may contain sensitive data)
*.tfvars
*.tfvars.json

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Lock file (optional - some teams commit this)
# .terraform.lock.hcl
EOF

    # Create README
    cat > README.md <<EOF
# $PROJECT_NAME

Terraform infrastructure project.

## Usage

\`\`\`bash
# Initialize
terraform init

# Plan changes
terraform plan

# Apply changes
terraform apply

# Destroy infrastructure
terraform destroy
\`\`\`

## Structure

- \`main.tf\` - Main configuration
- \`variables.tf\` - Input variables
- \`outputs.tf\` - Output values
- \`terraform.tfvars\` - Variable values (gitignored)
EOF

    echo ""
    echo "[+] Project created: $PROJECT_NAME"
    echo ""
    echo "Files created:"
    echo "  - main.tf"
    echo "  - variables.tf"
    echo "  - outputs.tf"
    echo "  - terraform.tfvars"
    echo "  - .gitignore"
    echo "  - README.md"
    echo ""
    echo "Next steps:"
    echo "  1. Edit main.tf to configure your infrastructure"
    echo "  2. Run 'terraform init' to initialize"
    echo "  3. Run 'terraform plan' to preview changes"
}

tf-graph-viz() {
    if ! command -v dot &> /dev/null; then
        echo "[!] Graphviz not installed. Install with:"
        echo "    macOS: brew install graphviz"
        echo "    Linux: sudo apt install graphviz"
        return 1
    fi

    OUTPUT=${1:-"graph.png"}

    echo "[*] Generating Terraform graph..."
    terraform graph | dot -Tpng > "$OUTPUT"
    echo "[+] Graph saved to: $OUTPUT"

    if [[ "$OSTYPE" == "darwin"* ]]; then
        open "$OUTPUT"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        xdg-open "$OUTPUT" 2>/dev/null || echo "[*] Open manually: $OUTPUT"
    else
        explorer "$OUTPUT"
    fi
}

# ============= NETWORK FUNCTIONS =============

find-port() {
    if [ -z "$1" ]; then
        echo "Usage: find-port <port-number>"
        return 1
    fi
    
    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
        netstat -ano | findstr ":$1"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        lsof -i ":$1"
    else
        lsof -i ":$1"
    fi
}

kill-port() {
    if [ -z "$1" ]; then
        echo "Usage: kill-port <port-number>"
        return 1
    fi
    
    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
        PORT=$1
        PID=$(netstat -ano | findstr ":$PORT" | awk '{print $5}' | head -n 1)
        if [ ! -z "$PID" ]; then
            taskkill //PID $PID //F
            echo "[+] Process on port $PORT killed"
        else
            echo "[!] No process found on port $PORT"
        fi
    else
        lsof -ti:$1 | xargs kill -9
        echo "[+] Process on port $1 killed"
    fi
}

# ============= SYSTEM FUNCTIONS =============

backup-config() {
    BACKUP_DIR="$HOME/config-backup-$(date +%Y%m%d_%H%M%S)"
    
    echo "[*] Creating backup in: $BACKUP_DIR"
    
    mkdir -p "$BACKUP_DIR"
    
    [ -f ~/.bashrc ] && cp ~/.bashrc "$BACKUP_DIR/"
    [ -f ~/.bashrc_devops ] && cp ~/.bashrc_devops "$BACKUP_DIR/"
    [ -f ~/.bashrc_functions ] && cp ~/.bashrc_functions "$BACKUP_DIR/"
    [ -f ~/.zshrc ] && cp ~/.zshrc "$BACKUP_DIR/"
    [ -f ~/.gitconfig ] && cp ~/.gitconfig "$BACKUP_DIR/"
    
    echo "[+] Backup created: $BACKUP_DIR"
    
    read -p "Create tar.gz archive? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        tar -czf "$BACKUP_DIR.tar.gz" -C "$HOME" "$(basename $BACKUP_DIR)"
        echo "[+] Archive created: $BACKUP_DIR.tar.gz"
    fi
}

extract() {
    if [ -z "$1" ]; then
        echo "Usage: extract <archive>"
        return 1
    fi
    
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "[!] Cannot extract: $1" ;;
        esac
    else
        echo "[!] File not found: $1"
    fi
}

# ============= UTILITY FUNCTIONS =============

weather() {
    CITY=${1:-"Paris"}
    curl -s "wttr.in/$CITY?format=3"
}

cheat() {
    if [ -z "$1" ]; then
        curl -s cheat.sh/:list
    else
        curl -s "cheat.sh/$1"
    fi
}

# ============= EXPORT FUNCTIONS =============

export -f git-cleanup
export -f git-sync
export -f docker-shell
export -f docker-ip
export -f docker-stats-live
export -f tf-clean
export -f tf-check
export -f tf-new
export -f tf-graph-viz
export -f find-port
export -f kill-port
export -f backup-config
export -f extract
export -f weather
export -f cheat

# ============= FUNCTION LIST =============

functions-list() {
    echo ""
    echo "=== AVAILABLE FUNCTIONS ==="
    echo ""
    echo "[GIT]"
    echo "  git-cleanup         - clean obsolete local branches"
    echo "  git-sync            - sync all branches with remote"
    echo ""
    echo "[DOCKER]"
    echo "  docker-shell <n>    - enter container by partial name"
    echo "  docker-ip <n>       - get container IP address"
    echo "  docker-stats-live   - show live Docker stats"
    echo ""
    echo "[TERRAFORM]"
    echo "  tf-clean            - clean Terraform cache & files"
    echo "  tf-check            - validate + format + plan"
    echo "  tf-new <name>       - create new Terraform project"
    echo "  tf-graph-viz [file] - generate infrastructure graph"
    echo ""
    echo "[NETWORK]"
    echo "  find-port <port>    - find process using port"
    echo "  kill-port <port>    - kill process on port"
    echo ""
    echo "[SYSTEM]"
    echo "  backup-config       - backup terminal configuration"
    echo "  extract <archive>   - extract any archive type"
    echo ""
    echo "[UTILITIES]"
    echo "  weather [city]      - show weather forecast"
    echo "  cheat <command>     - show command cheatsheet"
    echo ""
}
